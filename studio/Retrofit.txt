

Retrofit用法介绍


转换HTTP API为Java接口

	public interface GitHubService {
		@GET("users/{user}/repos")
		Call<List<Repo>> listRepos(@Path("user") String user);
	}

使用类Retrofit生成接口GitHubService的实现类

	Retrofit retrofit = new Retrofit.Builder()
		.baseUrl("https://api.github.com/")
		.build();

	GitHubService service = retrofit.create(GitHubService.class);

之后就可以直接调用生成的GitHubServcie实例去发送同步或异步的请求给Web服务器

	Call<List<Repo>> repos = service.listRepos("octocat");


API 声明

接口函数的注解和参数表明如何去处理请求

1、请求方法

每一个函数都必须有提供请求方式和相对URL的Http注解，Retrofit提供了5种内置的注解：GET、POST、PUT、DELETE和HEAD，
在注解中指定的资源的相对URL	@GET("users/list")
也可以在URL中指定查询参数	@GET("users/list?sort=desc")

2、URL处理

请求的URL可以在函数中使用替换块和参数进行动态更新，替换块是{ and }包围的字母数字组成的字符串，相应的参数必须使用相同的字符串被 

@Path 进行注释
	@GET("group/{id}/users")
	Call<User> groupList(@Path("id") int groupId);

也可以添加查询参数
	@GET("group/{id}/users")
	Call<User> groupList(@Path("id") int groupId, @Query("sort") String sort);

复杂的查询参数可以使用Map进行组合
	@GET("group/{id}/users")
	Call<User> groupList(@Path("id") int groupId, @QueryMap Map<String, String> options);

@Url，它允许我们直接传入一个请求的URL。这样以来我们可以将上一个请求的获得的url直接传入进来。
	@GET
	Call<User> getUser(@Url String url);

3、请求体

可以通过 @Body 注解指定一个对象作为Http请求的请求体

	@POST("users/new")
	Call<User> createUser(@Body User user)

该对象将会被Retrofit实例指定的转换器转换，如果没有添加转换器，则只有RequestBody可用。

4、FORM ENCODED 和 MULTIPART

函数也可以声明为发送form-encoded和multipart数据。 

当函数有 @FormUrlEncoded 注解的时候修饰表单域，将会发送form-encoded数据，每个键-值对都要被含有名字的 @Field 注解和提供值的对象所标注

	@FormUrlEncoded
	@POST("user/edit")
	Call<User> updateUser(@Field("first_name") String first, @Field("last_name") String last);

当我们有很多个表单参数时可以通过 @FieldMap 注解和Map对象参数来指定每个表单项的Key，value的值。

	@FormUrlEncoded
	@POST("user/edit")
	Call<User> updateUser(@FieldMap Map<String,String> fieldMap);


当函数有 @Multipart 注解的时候修饰用于文件上传，将会发送multipart数据，Parts都使用 @Part 注解进行声明

	@Multipart
	@PUT("user/photo")
	Call<User> updateUser(@Part("photo") RequestBody photo, @Part("description") RequestBody description);

Multipart parts要使用Retrofit的众多转换器之一或者实现RequestBody来处理自己的序列化。


5、Header处理

可以使用 @Headers 注解给函数设置静态的header

	@Headers("Cache-Control: max-age=640000")
	@GET("widget/list")
	Call<List<Widget>> widgetList();

	@Headers({
	    "Accept: application/vnd.github.v3.full+json",
	    "User-Agent: Retrofit-Sample-App"
	})
	@GET("users/{username}")
	Call<User> getUser(@Path("username") String username);

需要注意的是：header不能被互相覆盖。所有具有相同名字的header将会被包含到请求中。

可以使用 @Header 注解动态的更新一个请求的header。必须给 @Header 提供相应的参数，如果参数的值为空header将会被忽略，否则就调用参数值的toString()方法并使用
返回结果。

	@GET("user")
	Call<User> getUser(@Header("Authorization") String authorization)

使用OkHttp拦截器可以指定需要的header给每一个Http请求

	OkHttpClient client = new OkHttpClient();
	client.networkInterceptors().add(new Interceptor() {
	    @Override
	    public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {

		com.squareup.okhttp.Response response = chain.proceed(chain.request());

		// Do anything with response here

		return response;
	    }
	});
	Retrofit retrofit = new Retrofit.Builder()
		.baseUrl(BASE_URL)
		...
		.client(client)
		.build();

6、同步 VS 异步

每一个Call实例可以同步(call.excute())或者异步(call.enquene(CallBack<?> callBack))的被执行，每一个实例仅仅能够被使用一次，但是可以通过clone()函数创建一个
新的可用的实例。 也可以使用CallBack定义一个异步方法：

	@GET("user/{id}/photo")
	void getUserPhoto(@Path("id") int id, Callback<Photo> cb);

在Android上，回调被执行在主线程；在JVM上，回调被执行在发送Http请求的线程。


7、转换器

默认情况下，Retrofit只能够反序列化Http体为OkHttp的ResponseBody类型，并且只能够接受ResponseBody类型的参数作为 @body。 
添加转换器可以支持其他的类型，为了方便的适应流行的序列化库，Retrofit提供了模块：

	Gson : com.squareup.retrofit:converter-gson
	Jackson: com.squareup.retrofit:converter-jackson
	Moshi: com.squareup.retrofit:converter-moshi
	Protobuf: com.squareup.retrofit:converter-protobuf
	Wire: com.squareup.retrofit:converter-wire
	Simple XML: com.squareup.retrofit:converter-simplexml
	Scalars：com.squareup.retrofit2:converter-scalars


自定义转换器
如果需要使用Retrofit不支持开箱即用的内容格式(如YAML、txt、自定义格式)和API进行通信，或者想要使用不同的库实现已经存在的格式，你可以很方便的创建自己的转换
器。创建方式：新建一个类继承Converter.Factory类，并在构建Retrofit实例时传入转换器实例。


8、增加日志信息

　　在retrofit2.0中是没有日志功能的。但是retrofit2.0中依赖OkHttp，所以也就能够通过OkHttp中的interceptor来实现实际的底层的请求和响应日志。在这里我们需要修
改上一个retrofit实例，为其自定自定义的OkHttpClient。（'com.squareup.okhttp3:logging-interceptor）代码如下：

	HttpLoggingInterceptor httpLoggingInterceptor = new HttpLoggingInterceptor();
	httpLoggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY);
	OkHttpClient okHttpClient = new OkHttpClient.Builder()
		.addInterceptor(httpLoggingInterceptor)
		.build();

	Retrofit retrofit = new Retrofit.Builder()
		.addCallAdapterFactory(RxJavaCallAdapterFactory.create())
		.client(okHttpClient)
		.baseUrl()
		.addConverterFactory(GsonConverterFactory.create())
		.build();


让所有网络请求都附上你的 token：

	Interceptor mTokenInterceptor = new Interceptor() {
	    @Override public Response intercept(Chain chain) throws IOException {
		Request originalRequest = chain.request();
		if (Your.sToken == null || alreadyHasAuthorizationHeader(originalRequest)) {
		    return chain.proceed(originalRequest);
		}
		Request authorised = originalRequest.newBuilder()
		    .header("Authorization", Your.sToken)
		    .build();
		return chain.proceed(authorised);
	    }
	};

解释：if 判断意思是，如果你的 token 是空的，就是还没有请求到 token，比如对于登陆请求，是没有 token 的，只有等到登陆之后才有 token，这时候就不进行附着
上 token。另外，如果你的请求中已经带有验证 header 了，比如你手动设置了一个另外的 token，那么也不需要再附着这一个 token.
     header 的 key 通常是Authorization，如果你的不是这个，可以修改。

 
如果需要在遇到诸如 401 Not Authorised 的时候进行刷新 token，可以使用 Authenticator，这是一个专门设计用于当验证出现错误的时候，进行询问获取处理的拦截器：

	Authenticator mAuthenticator = new Authenticator() {
	    @Override public Request authenticate(Route route, Response response)
		    throws IOException {
		Your.sToken = service.refreshToken();
		return response.request().newBuilder()
			       .addHeader("Authorization", Your.sToken)
			       .build();        
	    }
	}

然后，对于以上的两个拦截器，分别使用 OkHttpClient.Builder 对象的 addNetworkInterceptor(mTokenInterceptor) 和 authenticator(mAuthenticator) 即可。


