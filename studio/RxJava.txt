
RxJava

RxJava 的异步实现，是通过一种扩展的观察者模式来实现的。 
RxJava 作为一个工具库，使用的就是通用形式的观察者模式。（android的事件监听机制是专用的观察者模式）
  
1、RxJava 的观察者模式
RxJava 有四个基本概念：Observable (可观察者，即被观察者)、 Observer (观察者)、 subscribe (订阅)、事件。
Observable 和 Observer 通过 subscribe() 方法实现订阅关系，从而 Observable 可以在需要的时候发出事件来通知Observer。

与传统观察者模式不同， RxJava 的事件回调方法除了普通事件 onNext()（相当于 onClick() / onEvent()）之外，
还定义了两个特殊的事件：onCompleted() 和 onError()。

onCompleted(): 事件队列完结。RxJava 不仅把每个事件单独处理，还会把它们看做一个队列。RxJava 规定，当不会再有
新的 onNext() 发出时，需要触发 onCompleted() 方法作为标志。

onError(): 事件队列异常。在事件处理过程中出异常时，onError() 会被触发同时队列自动终止，不允许再有事件发出。
在一个正确运行的事件序列中, onCompleted() 和 onError() 有且只有一个，并且是事件序列中的最后一个。需要注意的
是，onCompleted() 和 onError() 二者也是互斥的，即在队列中调用了其中一个，就不应该再调用另一个。



2. 基本实现

1) 创建 Observer
   Observer 即观察者，它决定事件触发的时候将有怎样的行为。 实现Observer接口或者继承实现了 Observer 的抽象类：Subscriber。
   在 RxJava 的 subscribe 过程中，Observer 也总是会先被转换成一个 Subscriber 再使用。三个方法：  onNext(),OnCompleted(),OnError()。
  
   1.onStart(): 这是 Subscriber 增加的方法。它会在 subscribe 刚开始，而事件还未发送之前被调用，可以用于做一些准备工作，例如数据的清零或重置。这是一个可选
   方法，默认情况下它的实现为空。需要注意的是，如果对准备工作的线程有要求（例如弹出一个显示进度的对话框，这必须在主线程执行）， onStart() 就不适用了，因
   为它总是在 subscribe 所发生的线程被调用，而不能指定线程。要在指定的线程来做准备工作，可以使用 doOnSubscribe() 方法，具体可以在后面的文中看到。
   
   2.unsubscribe(): 这是 Subscriber 所实现的另一个接口 Subscription 的方法，用于取消订阅。在这个方法被调用后，Subscriber 将不再接收事件。一般在这个方法调
   用前，可以使用 isUnsubscribed() 先判断一下状态。 unsubscribe() 这个方法很重要，因为在 subscribe() 之后， Observable 会持有 Subscriber 的引用，这个引用
   如果不能及时被释放，将有内存泄露的风险。所以最好保持一个原则：要在不再使用的时候尽快在合适的地方（例如 onPause() onStop() 等方法中）调用 unsubscribe() 
   来解除引用关系，以避免内存泄露的发生。


由于Subscriber一旦调用了unsubscribe方法之后，就没有用了。且当事件传递到onError或者onCompleted之后，也会自动的解绑。这样出现的一个问题就是每次发送请求都要
创建新的Subscriber对象。Observer本身是一个接口，他的特性是不管你怎么用，都不会解绑，为什么呢？因为他没有解绑的方法。所以就达到了复用的效果，事实上，如果
你用的是Observer，在调用Observable对象的subscribe方法的时候，会自动的将Observer对象转换成Subscriber对象。



2) 创建 Observable
   Observable 即被观察者，它决定什么时候触发事件以及触发怎样的事件。 RxJava 使用 create() 方法来创建一个 Observable ，create() 方法是 RxJava 最基本的创造
   事件序列的方法。并为它定义事件触发规则：

   Observable observable = Observable.create(new Observable.OnSubscribe<String>() {
    @Override
    public void call(Subscriber<? super String> subscriber) {
        subscriber.onNext("Hello");
        subscriber.onNext("Hi");
        subscriber.onNext("Aloha");
        subscriber.onCompleted();
     }
   });
 
   可以看到，这里传入了一个 OnSubscribe 对象作为参数。OnSubscribe 会被存储在返回的 Observable 对象中，它的作用相当于一个计划表，当 Observable 被订阅的时
   候，OnSubscribe 的 call() 方法会自动被调用，事件序列就会依照设定依次触发（对于上面的代码，就是观察者Subscriber 将会被调用三次 onNext() 和一次 
   onCompleted()）。这样，由被观察者调用了观察者的回调方法，就实现了由被观察者向观察者的事件传递，即观察者模式。

3) Subscribe (订阅)
   创建了 Observable 和 Observer 之后，再用 subscribe() 方法将它们联结起来，整条链子就可以工作了。
   
   observable.subscribe(observer);
   // 或者：
   observable.subscribe(subscriber);
  
   Observable.subscribe(Subscriber) 的内部实现是这样的（仅核心代码）：

    // 注意：这不是 subscribe() 的源码，而是将源码中与性能、兼容性、扩展性有关的代码剔除后的核心代码。
    // 如果需要看源码，可以去 RxJava 的 GitHub 仓库下载。
	public Subscription subscribe(Subscriber subscriber) {
	    subscriber.onStart();
	    onSubscribe.call(subscriber);
	    return subscriber;
	}
  可以看到，subscriber() 做了3件事：(注意：不能确定事件类型，怎么触发 )
  1.调用 Subscriber.onStart() 。这个方法在前面已经介绍过，是一个可选的准备方法。
  2.调用 Observable 中的 OnSubscribe.call(Subscriber) 。在这里，事件发送的逻辑开始运行。从这也可以看出，在 RxJava 中， Observable 并不是在创建的时候就立
  即开始发送事件，而是在它被订阅的时候，即当 subscribe() 方法执行的时候。
  3.将传入的 Subscriber 作为 Subscription 返回。这是为了方便 unsubscribe().



3.变换

 所谓变换，就是将事件序列中的对象或整个序列进行加工处理，转换成不同的事件或事件序列。
 1、map(): 事件对象的直接变换。它是 RxJava 最常用的变换。传递参数为Func1类对象。
    Func1 包装的是有返回值的方法。
    map() 方法将参数中的 String 对象转换成一个 Bitmap 对象后返回，而在经过 map() 方法后，事件的参数类型也由 String 转为了 Bitmap。这种直接变换对象并返回
    的，是最常见的也最容易理解的变换。不过 RxJava 的变换远不止这样，它不仅可以针对事件对象，还可以针对整个事件队列，这使得 RxJava 变得非常灵活。

     Observable<Bitmap> bitmapObservable = observable.map(new Func1<String, Bitmap>() {
            @Override
            public Bitmap call(String s) { // 参数类型是String，返回类型是Bitmap
                return BitmapFactory.decodeFile(s); //  Func1 包装的是有返回值的方法。
            }
        });

2、flatMap(): 使用 flatMap()进行一对多转换

     * flatMap() 和 map() 有一个相同点：它也是把传入的参数转化之后返回另一个对象。但需要注意，和 map() 不同的是，
     * flatMap() 中返回的是个 Observable 对象，并且这个 Observable 对象并不是被直接发送到了 Subscriber 的回调方法中。

     * flatMap() 的原理是这样的：
     * 1. 使用传入的事件对象创建一个 Observable 对象；
     * 2. 并不发送这个 Observable, 而是将它激活，于是它开始发送事件；
     * 3. 每一个创建出来的Observable发送的事件，都被汇入同一个Observable ，而这个 Observable 负责将这些事件统一交给 Subscriber 的回调方法。这三个步骤，
     *    把事件拆成了两级，通过一组新创建的 Observable 将初始的对象『铺平』之后通过统一路径分发了下去。而这个『铺平』就是 flatMap() 所谓的 flat。
     
       Observable<String> observable = Observable.from(students).flatMap(new Func1<Student, Observable<String>>() {
            @Override
            public Observable<String> call(Student student) {
                ArrayList<String> arrayList = student.getArrayList();
                return Observable.from(arrayList);
            }
        });

   扩展：由于可以在嵌套的 Observable 中添加异步代码， flatMap() 也常用于嵌套的异步操作，例如嵌套的网络请求。示例代码（Retrofit + RxJava）：

	networkClient.token() // 返回 Observable<String>，在订阅时请求 token，并在响应后发送 token
	    .flatMap(new Func1<String, Observable<Messages>>() {
		@Override
		public Observable<Messages> call(String token) {
		    // 返回 Observable<Messages>，在订阅时请求消息列表，并在响应后发送请求到的消息列表
		    return networkClient.messages();
		}
	    })
	    .subscribe(new Action1<Messages>() {
		@Override
		public void call(Messages messages) {
		    // 处理显示消息列表
		    showMessages(messages);
		}
	    });

   传统的嵌套请求需要使用嵌套的 Callback 来实现。而通过 flatMap() ，可以把嵌套的请求写在一条链中，从而保持程序逻辑的清晰。
	throttleFirst(): 在每次事件触发后的一定时间间隔内丢弃新的事件。常用作去抖动过滤，例如按钮的点击监听器：

	RxView.clickEvents(button) // RxBinding 代码，后面的文章有解释
	.throttleFirst(500, TimeUnit.MILLISECONDS) // 设置防抖间隔为 500ms
	.subscribe(subscriber);



4.变换的原理：lift()

   这些变换虽然功能各有不同，但实质上都是针对事件序列的处理和再发送。而在 RxJava 的内部，它们是基于同一个基础的变换方法： lift(Operator)。
   首先看一下 lift() 的内部实现（仅核心代码）：

	// 注意：这不是 lift() 的源码，而是将源码中与性能、兼容性、扩展性有关的代码剔除后的核心代码。
	public <R> Observable<R> lift(Operator<? extends R, ? super T> operator) {
	    return Observable.create(new OnSubscribe<R>() {
		@Override
		public void call(Subscriber subscriber) {
		    Subscriber newSubscriber = operator.call(subscriber);
		    newSubscriber.onStart();
		    onSubscribe.call(newSubscriber);
		}
	    });
	}

    这段代码很有意思：它生成了一个新的 Observable 并返回，而且创建新 Observable 所用的参数 OnSubscribe 的回调方法 call() 中的实现竟然看起来和前面讲过的 
    Observable.subscribe() 一样！然而它们并不一样哟~不一样的地方关键就在于第二行 onSubscribe.call(subscriber) 中的 onSubscribe 所指代的对象不同。

    subscribe() 中这句话的 onSubscribe 指的是 Observable 中的 onSubscribe 对象，这个没有问题，但是 lift() 之后的情况就复杂了点。 当含有 lift() 时： 
    1.lift() 创建了一个 Observable 后，加上之前的原始 Observable，已经有两个 Observable 了； 
    2.而同样地，新 Observable 里的新 OnSubscribe 加上之前的原始 Observable 中的原始 OnSubscribe，也就有了两个 OnSubscribe； 
    3.当用户调用经过 lift() 后的 Observable 的 subscribe() 的时候，使用的是 lift() 所返回的新的 Observable ，于是它所触发的 
      onSubscribe.call(subscriber)，也是用的新 Observable 中的新 OnSubscribe，即在 lift() 中生成的那个 OnSubscribe； 
    4.而这个新 OnSubscribe 的 call() 方法中的 onSubscribe ，就是指的原始 Observable 中的原始 OnSubscribe ，在这个 call() 方法里，新 OnSubscribe 利用 
      operator.call(subscriber) 生成了一个新的 Subscriber（Operator 就是在这里，通过自己的 call() 方法将新 Subscriber 和原始 Subscriber 进行关联，并插入
      自己的『变换』代码以实现变换），然后利用这个新 Subscriber 向原始 Observable 进行订阅。 
    这样就实现了 lift() 过程，有点像一种代理机制，通过事件拦截和处理实现事件序列的变换。
    
    精简掉细节的话，也可以这么说：在 Observable 执行了 lift(Operator) 方法之后，会返回一个新的 Observable，这个新的 Observable 会像一个代理一样，负责接收
    原始的 Observable 发出的事件，并在处理后发送给 Subscriber。



5. compose: 对 Observable 整体的变换
   除了 lift() 之外， Observable 还有一个变换方法叫做 compose(Transformer)。它和 lift() 的区别在于， lift() 是针对事件项和事件序列的，而 compose() 是针对 
   Observable 自身进行变换。举个例子，假设在程序中有多个 Observable ，并且他们都需要应用一组相同的 lift() 变换。
   
   public class LiftAllTransformer implements Observable.Transformer<Integer, String> {
	    @Override
	    public Observable<String> call(Observable<Integer> observable) {
		return observable
		    .lift1()
		    .lift2()
		    .lift3()
		    .lift4();
	    }
	}
	
  Transformer liftAll = new LiftAllTransformer();
  observable1.compose(liftAll).subscribe(subscriber1);
  observable2.compose(liftAll).subscribe(subscriber2);

  使用 compose() 方法，Observable 可以利用传入的 Transformer 对象的 call 方法直接对自身进行处理，也就不必被包在方法的里面了。



6. 线程控制 ―― Scheduler 

在不指定线程的情况下， RxJava 遵循的是线程不变的原则，即：在哪个线程调用 subscribe()，就在哪个线程生产事件；在哪个线程生产事件，就在哪个线程消费事件。如
果需要切换线程，就需要用到 Scheduler （调度器）。

在 RxJava 的默认规则中，事件的发出和消费都是在同一个线程的。也就是说，如果只用上面的方法，实现出来的只是一个同步的观察者模式。观察者模式本身的目的就是『
后台处理，前台回调』的异步机制，因此异步对于 RxJava 是至关重要的。而要实现异步，则需要用到 RxJava 的另一个概念： Scheduler 。

 RxJava 已经内置了几个 Scheduler ，它们已经适合大多数的使用场景：
 Schedulers.immediate(): 直接在当前线程运行，相当于不指定线程。这是默认的 Scheduler。
 Schedulers.newThread(): 总是启用新线程，并在新线程执行操作。
 Android 还有一个专用的 AndroidSchedulers.mainThread()，它指定的操作将在 Android 主线程运行。
 Schedulers.io(): I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，
                  区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。
		  不要把计算工作放在 io() 中，可以避免创建不必要的线程。

 Schedulers.computation(): 计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算。
                           这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，
			   否则 I/O 操作的等待时间会浪费 CPU。
 
 subscribeOn() 和 observeOn() 两个方法来对线程进行控制了。
 subscribeOn(): 指定 subscribe() 所发生的线程，即 Observable.OnSubscribe 被激活时所处的线程。或者叫做事件产生的线程。
 observeOn():   指定 Subscriber 所运行在的线程。或者叫做事件消费的线程。


 前面讲到了，可以利用 subscribeOn() 结合 observeOn() 来实现线程控制，让事件的产生和消费发生在不同的线程。可是在了解了 map() flatMap() 等变换方法后，有些
 好事的（其实就是当初刚接触 RxJava 时的我）就问了：能不能多切换几次线程？

 答案是：能。因为 observeOn() 指定的是 Subscriber 的线程，而这个 Subscriber 并不是（严格说应该为『不一定是』，但这里不妨理解为『不是』）subscribe() 参数
 中的 Subscriber ，而是 observeOn() 执行时的当前 Observable 所对应的 Subscriber ，即它的直接下级 Subscriber 。换句话说，observeOn() 指定的是它之后的操作
 所在的线程。因此如果有多次切换线程的需求，只要在每个想要切换线程的位置调用一次 observeOn() 即可。上代码：

   Observable.just(1, 2, 3, 4) // IO 线程，由 subscribeOn() 指定
     .subscribeOn(Schedulers.io())
     .observeOn(Schedulers.newThread())
     .map(mapOperator) // 新线程，由 observeOn() 指定
     .observeOn(Schedulers.io())
     .map(mapOperator2) // IO 线程，由 observeOn() 指定
     .observeOn(AndroidSchedulers.mainThread) 
     .subscribe(subscriber);  // Android 主线程，由 observeOn() 指定
     
 如上，通过 observeOn() 的多次调用，程序实现了线程的多次切换。
 不同于observeOn()， subscribeOn()的位置放在哪里都可以，但它是只能调用一次的。当使用了多个 subscribeOn() 的时候，只有第一个 subscribeOn() 起作用。

 
 Scheduler 的原理
 subscribeOn() 和 observeOn() 的内部实现，也是用的 lift()。


 doOnSubscribe() 方法的使用

 在前面讲 Subscriber 的时候，提到过 Subscriber 的 onStart() 可以用作流程开始前的初始化。然而onStart()由于在subscribe()发生时就被调用了，因此不能指定
 线程，而是只能执行在subscribe()被调用时的线程。这就导致如果 onStart() 中含有对线程有要求的代码（例如在界面上显示一个 ProgressBar，这必须在主线程执行），
 将会有线程非法的风险，因为有时你无法预测 subscribe() 将会在什么线程执行。

 而与 Subscriber.onStart() 相对应的，有一个方法 Observable.doOnSubscribe() 。它和 Subscriber.onStart() 同样是在 subscribe() 调用后而且在事件发送前执行，
 但区别在于它可以指定线程。默认情况下， doOnSubscribe() 执行在 subscribe() 发生的线程；而如果在 doOnSubscribe() 之后有 subscribeOn() 的话，它将执行在离它
 最近的 subscribeOn() 所指定的线程。

    Observable.create(onSubscribe)
    .subscribeOn(Schedulers.io())
    .doOnSubscribe(new Action0() {
        @Override
        public void call() {
            progressBar.setVisibility(View.VISIBLE); // 需要在主线程执行
        }
    })
    .subscribeOn(AndroidSchedulers.mainThread()) // 指定主线程
    .observeOn(AndroidSchedulers.mainThread())
    .subscribe(subscriber);

在 doOnSubscribe()的后面跟一个 subscribeOn() ，就能指定准备工作的线程了。



obverable 和 subscribe 指定不同线程运行结果：

observable
	.subscribeOn(Schedulers.io()) // 指定 subscribe() 发生在 IO 线程
	.doOnSubscribe() // // 指定 doOnSubscribe 发生在新线程
	.subscribeOn(Schedulers.newThread())
	.observeOn(Schedulers.io())  // 指定 Subscriber 的回调发生在 IO 线程
	.filter()
	.observeOn(Schedulers.io()) // 指定 Subscriber 的回调发生在 IO 线程
	.doOnNext()
	.observeOn(Schedulers.newThread()) // 指定 Subscriber 的回调发生在新线程
	.subscribe(observer);
	 	
* onStart===main

* doOnSubscribe====RxNewThreadScheduler-2 由subscribeOn()指定
  doOnSubscribe() 执行在 subscribe() 发生的线程；而如果在 doOnSubscribe() 之后有 subscribeOn() 的话，将执行在离它最近的 subscribeOn() 所指定的线程。

* OnSubscribe====RxIoScheduler-4    由subscribeOn()指定
  由subscribeOn()指定。当使用了多个 subscribeOn() 的时候，只有第一个 subscribeOn() 起作用。

* filter===RxIoScheduler-3          由observeOn()指定，不指定默认运行在subscribeOn()指定的线程中，即遵循线程不变原则

* doOnNext=====RxIoScheduler-2      由observeOn()指定，不指定默认运行在subscribeOn()指定的线程中

* onNext====RxNewThreadScheduler-1  由observeOn()指定，不指定默认运行在subscribeOn()指定的线程中



observable
	.subscribeOn(Schedulers.io()) // 指定 subscribe() 发生在 IO 线程
	.doOnSubscribe()
	.subscribeOn(Schedulers.newThread())
	.filter()
	.doOnNext()
	.observeOn(Schedulers.newThread()) // 指定 Subscriber 的回调发生在主线程
	.subscribe(observer);


 I/System.out: onStart===main
 I/System.out: doOnSubscribe====RxNewThreadScheduler-2
 I/System.out: OnSubscribe====RxIoScheduler-2
 I/System.out: filter===RxIoScheduler-2
 I/System.out: doOnNext=====RxIoScheduler-2
 I/System.out: onNext=====RxNewThreadScheduler-1
