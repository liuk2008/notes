
计算机系统原理

1、硬件系统：运算器、控制器、存储器、输入设备和输出设备

2、CPU：包含运算器、控制器、寄存器、内部总线，基本功能：指令控制、操作控制、时序控制、数据处理。
2.1、运算器：由算术逻辑单元（ALU）、累加寄存器（AC）、数据缓冲寄存器（DR）和状态条件寄存器（PSW）组成，主要完成算术和逻辑运算
     ALU：实现对数据的算术运算和逻辑运算
     AC：为ALU提供一个工作区，用于暂存操作数或数据的地址，将运算结果存放在累加器中
     DR：保存由内存读写的指令或者数据字，作为CPU和内存、外设之间数据中转站
     PSW：保存由算术指令和逻辑指令运行或测试的结果建立的各种条件码内容
2.2、控制器：包括指令控制逻辑、时序控制逻辑、总线控制逻辑、中断控制逻辑
     指令控制：主要功能是从主存中取出指令并进行分析，取指令->分析指令->执行指令->形成下一条指令地址
     指令寄存器（IR）：当CPU执行指令时，先从内存中取出指令到缓冲寄存器中，再送入指令寄存器暂存，ID根据IR的内容产生微操作指令，最后执行指令。
     程序计数器（PC）：存储指令的地址，CPU自动修改PC的内容，使PC总是保持将要执行的下一条指令的地址
     地址寄存器（AR）：保存CPU所访问的内存单元地址
     指令译码器（ID）：指令包含操作码和操作数地址码，ID对操作码字段进行分析解释
      
3、数据表示：原码、反码、补码和移码，注意小数和浮点数的表示方法
3.1、原码：最高位是符号位，0表示正号，1表示负号
     反码：最高位是符号位，0表示正号，1表示负号，正数反码和原码相同，负数的反码是绝对值按位求反
     补码：最高位是符号位，0表示正号，1表示负号，负数的反码是绝对值按位求反+1 
     异或：Java异或的规则是转换成二进制比较，相同为0，不同为1
3.2、0原码：00000000，10000000，反码：00000000，1111111，补码：00000000
3.3、二进制数N，浮点数表示形式N=2^E*F，其中E为阶码，F为尾数，数值范围由阶码决定，精度由尾数决定
     浮点数相乘：阶码等于两乘数的阶码相加，尾数等于两乘数的尾数相乘
     浮点数相除：阶码等于两除数的阶码相减，尾数等于两除数的尾数相除

4、校验码：奇偶校验码、海明码、循环冗余校验码
4.1、奇偶校验码：在编码中增加一位校验位，使编码中的1的个数位奇数或者偶数
4.2、海明码：利用奇偶性俩检错和纠错的校验方法，
4.3、循环冗余校验码（CRC）：采用模2运算，n为CRC码的字长，信息码k位，校验码（n-k）位

5、指令系统：不同的处理器族支持不同的指令集体系结构
5.1、复杂指令集计算机（CISC）、精简指令集计算机（RISC）
5.2、指令的流水处理
     指令控制方式：顺序方式、重叠方式、流水方式
     流水线的种类：
     流水的相关处理： 
     吞吐率和流水建立时间：吞吐率是指单位时间内流水线处理机流出的结果数，即单位时间内执行的指令数
5.3、指令格式：操作码和操作数地址码。若操作码的长度为n，则可表示的指令为2^n条
     寻址方式：立即寻址、直接寻址、寄存器寻址、寄存器间接寻址、间接寻址
     立即寻址：操作数包含在指令中，立即数就跟在指令操作码后面，取出指令时即可得到操作数
     直接寻址：操作数存放在内存单元中，指令中直接给出操作数所在存储单元的地址
     寄存器寻址：操作数存放在某一寄存器中，指令中给出存放操作数的寄存器名
     寄存器间接寻址：操作数存放在内存单元，操作数所在存储单元的地址在某个寄存器中
     间接寻址：操作数存放在内存单元中，指令中直接给出操作数所在存储单元的地址的地址，需要进行两次访问内存的操作

6、存储系统：主存、外存
     在一个存储器中容纳的存储单元总数通常称为该存储器的存储容量
6.1、存储体系：CPU->Cache->内存->外存
6.2、存储工作方式分类：读/写存储器（RAM）和只读存储器
     ROM：固定只读存储器，一般用于存放系统程序BIOS和用于微程序控制
     PROM：可编程只读存储器，一次性写入，不能再修改
     EPROM：可擦除可编程只读存储器，可写入可修改
     EEPROM：电擦除可编程只读存储器，用电擦除方法进行修改
     SRAM：不断电情况下信息一直保存
     DRAM：信息随时间逐渐消失，需定时刷新，一般用于计算机系统内存
6.3、访问方式分类：按地址访问、按内容访问
6.4、寻址方式分类：随机存储器、顺序存储器、直接存储器
6.5、Cache存储器：用户存放主存的部分拷贝信息，若访问的信息在，即为命中，命中时直接对Cache存储器寻址，同时需将主存中地址转换成Cache存储器地址。
     直接地址映像：主存的块与Cache的块对应关系是固定的
     全相联映像：主存与Cache存储器均分成大小相同的块，允许主存的任一块调入Cache存储器的任何一个块
     组相联映像：规定组采用直接映像方式而块采用全相联映像方式
     替换算法：提高Cache的命中率，包含随机替换算法、先进先出算法、近期最少使用算法、优化替换算法
     性能分析：命中率是一个重要指标
6.6、磁表面存储器：磁道、扇区、道密度、位密度、最大位密度
     平均访问时间：包括平均寻道时间和平均等待时间

7、输入/输出技术
7.1、I/O接口：由I/O系统控制CPU、存储器、外设之间的数据通信
     主机<->I/O接口<->I/O设备
     按数据传送的格式：并行接口、串行接口，一般情况下，接口与I/O设备采用串行方式，串行接口与主机采用并行方式
     按主机访问I/O设备控制方式：程序查询接口、中断接口、DMA接口、I/O通道方式、I/O处理机方式
     按时序控制方式：同步接口、异步接口
7.2、内存与接口的编址方法：独立编址方法、统一编址方法
7.3、CPU与I/O数据交换方式：
     直接程序控制：无条件传送、程序查询方式，采用的是串行工作的方式
     中断方式：IO设备准备数据的过程中CPU不查询IO设备状态，当IO设备准备好后CPU中断服务程序进行数据传输，数据传输往后返回原来的中断的程序
     直接存储器存取方式（DMA）：主存和I/O之间有一条直接数据通道，DMA方式避开了CPU
     区别：
     1、查询方式：CPU与设备串行工作、数据传送与主程序串行工作
     2、中断方式：CPU与设备并行工作、数据传送与主程序串行工作
     3、DMA方式：CPU与设备并行工作、数据传送与主程序并行工作
     适用范围：
     1、查询方式：适合于工作不太繁忙的系统
     2、中断方式：适合于CPU任务比较忙的情况下，尤其适合实时控制和紧急事件的处理
     3、DMA方式：适合于需要高速而又频繁地与存储器进行批量的数据交换的I/O设备

8、总线结构
8.1、系统总线：勇于计算机各组成部分的连接，总线分类：地址总线、数据总线和控制总线
     系统总线的性能指标主要由带宽、位宽和工作频率等
     系统总线的带宽指的是单位时间内总线上传送的数据量，即每秒钟传送的最大稳态数据传输率
     系统总线的位宽是指总线能同时传送的二进制数据的位数，或数据总线的位数
     总线的带宽=总线的工作频率*总线的位宽/8
8.2、数据总线：CPU与内存或输入设备通过数据总线传送数据信息，是双向的
     地址总线：用于传送CPU发出的地址信息，是单向的，地址总线的宽度决定了CPU的最大寻址能力
     控制总线：用来传送控制信号、时序信号和状态信息等，是双向的
8.3、常见总线：ISA、EISA、PCI（内总线、并行传输）、SCSI（外总线、并行传输）
               
9、加密技术&计算机可靠性
9.1、可逆加密算法
     对称加密： DES、3DES、AES
     非对称加密：RSA
9.2、不可逆加密算法
     MD5加密、SHA加密
9.3、RAS：可靠性R、可用性A、可维修性S，平均无故障时间、平均修复时间
     可靠性模型：串联系统、并联系统，一般计算系统的可靠性、失效率



程序设计语言基础

1、程序设计语言基本概念
1.1、编译程序和解释程序
     解释程序：直接解释执行源程序，或者翻译成中间代码加以执行
     编译程序：编译器将源程序翻译成目标程序，目标程序独立执行
1.2、程序设计语言定义：涉及语法、语义、语用
     程序设计语言基本成分：包括数据、运算、控制和传输

2、语言处理基础
2.1、汇编程序
2.2、编译程序、
     工作过程：词法分析、语法分析、语义分析、中间代码生成、代码优化、目标代码生成
     确定有限自动机（DFA）：用状态转换图和状态转换矩阵表示，转换图是一个有向图
     不确定有限自动机（NFA）：
2.3、解释程序



数据结构

1、线性结构
1.1、线性表
     线性表采用顺序存储和链式存储，主要的基本操作是插入、删除和查找
     顺序存储：用一组地址连续的存储单元依次存储线性表中的数据，特点查找快、增删慢
     顺序存储：表长为n的线性表，共有n+1个可插入位置，等概率下插入一个元素是平均移动元素数目为n/2
     顺序存储：表长为n的线性表，共有n个可删除位置，等概率下删除一个元素是平均移动元素数目为(n-1)/2
     链式存储：通过指针链接起来的结点存储数据元素，地址不连续，结构包括数据域+指针域，结点空间需要时才申请，特点查找慢、增删快
     p：是一个指针，指针里存放的是结点A的地址 
     p->：指针ｐ所存的地址对应的内容，这里p指针里存的是个节点，所以p->代表结点
     p->next：取这个节点的指针域的内容，得到下一个节点所在的内存地址
     p->data：取这个节点的数据域的内容
1.2、栈和队列
     栈：后进先出，队列：先进先出
     存储结构：顺序存储、链式存储
1.3、串
     串（字符串）是一种特殊的线性表，其数据元素为字符
     存储结构：顺序存储、链式存储

2、数组、矩阵和广义表
2.1、数组：采用顺序存储结构，二维数组可分为以行为主序和以列为主序 A[m][n]表示m行，n列，一般计算元素的存储地址
2.2、矩阵：
2.3、广义表

3、树
3.1、树结构是一种非常重要的非线性结构
     结点的度：指一个结点的子树个数
     叶子结点：也称为终端结点，指度为0的结点
     内部结点：度不为0的结点，也称为分支结点或非终端结点
     结点的层次：根为第一层，若某结点在第i层，则其孩子结点在第i+1层
     树的高度：一棵树的最大成熟记为树的高度
     有序（无序）树：若将树中结点的各子树看成是从左到右具有次序的，称有序树，否则为无序树
3.2、二叉树
     二叉树：由一个根结点及两棵不相交的、分别称为左子树和右子树的二叉树所组成
     满二叉树：深度为i的二叉树有2^i-1个结点，则称为满二叉树
     完全二叉树：在一个高度为h的二叉树，除了第h层，其余各层都是满的，且最后一层的结点依次从左到右分布，称为完全二叉树
     非完全二叉树：最后一层的结点未依次从左到右分布，称为非完全二叉树
     性质：1、第i层上最多有2^(i-1)个结点，2、深度为k的二叉树至多有2^k-1个结点，3、具有n个结点的完全二叉树的高度为[log2n]+1
     存储结构：顺序存储、链式存储
     顺序存储结构用一组地址连续的存储单元存储二叉树中的结点时，必须将树中的结点排查一个适当的线性序列，对于完全二叉树节省空间，对于一般二叉树不适用，造成空间浪费
     二叉树遍历：对含有n个结点的二叉树，遍历算法的时间复杂度都为O(n)
     1、先序遍历：先访问根结点，再遍历根结点的左子树，最后遍历根结点的右子树
     2、中序遍历：先遍历根结点的左子树，再访问根结点，最后遍历根结点的右子树
     3、后序遍历：先遍历根结点的左子树，再遍历根结点的右子树，最后访问根结点
3.3、最优二叉树
     最优二叉树又称为哈夫曼树，哈夫曼树不是唯一的，但最短带权路径长度只有一个
     由于哈夫曼树中没有度为1的结点，则一棵有n个叶子结点的哈夫曼树共有2n-1个结点
3.4、二叉查找树
     二叉查找树又称为二叉排序树、二叉检索树，或者是一棵空树
     1、左子树非空，左子树中的所有结点的值均小于根结点的值
     2、右子树非空，右子树中的所有结点的值均大于根结点的值
3.5、树和森林

4、图
4.1、图结构是一种非常重要的非线性结构
     图G是由集合V和E构成的二元组，记作G=（V，E），V是图中的顶点的非空有限集合，E是图中边的有限集合
     有向图、无向图、完全图，一个无向图有n个顶点，每个顶点与其他n-1个顶点之间都有边，成为无向完全图
     n个顶点无向完全图有n(n-1)/2条边，n个顶点有向完全图有n(n-1)条边
     度、出度和入度，顶点的度表示该顶点的入度和出度之和
     路径、子图、连通图和强连通图
4.2、存储结构：邻接矩阵表示法，邻接链表表示法
     无向图的邻接矩阵是对称的
     有向图的邻接链表需要和逆邻接表结合表示
4.3、图的遍历
     图的遍历过程中必须记下每个已访问过的顶点，避免重复访问
     深度优先搜索：依次从顶点V的未被访问的邻节点出发，进行深度优先搜索，直至和V有路径相通的顶点都被访问到
     邻接矩阵表示时，时间复杂度为O(n^2)，邻接链表作为存储结构时，时间复杂度为O(n+e)
     广度优先搜索：依次访问顶点V的各个未被访问的临接点（横向访问）
4.4、生成树及最小生成树
     生成树：包含图中全部顶点的一个极小连通子图（生成树不唯一），只有无向连通图才有生成树
     极大连通子图要求连通子图包含所有边，极小连通子图要求使图保存连通的前提下使边数最少
     最小生成树：生成树各边的权值总和最小时称为最小生成树
     Prim算法时间复杂度O(n^2)，适合于求边稠密的网的最小生成树
     Kruskal算法时间复杂度O(eloge)，适合于求边稀疏的网的最小生成树
4.5、拓扑排序和关键路径
4.6、最短路径

5、查找
5.1、静态查找表：不进行修改表结构的操作，查询或者检索某个特定的数据元素
     动态查找表：修改表结构的操作，除了查询或检索，还可以插入或者删除某个数据元素
5.2、静态查找：顺序查找：平均查找长度为：(n+1)/2，折半查找，索引查找：索引表+块内
     动态查找：二叉排序树
5.3、哈希表
     定义：将输入数据加密得出一个固定输出数据，叫做哈希
     哈希冲突：关键字不同，哈希函数值相同，则称为哈希冲突，解决冲突的方法：开放定址法、链地址法
     哈希查找



算法基础

   时间复杂度、空间复杂度
   
   在数据结构/算法中，通常使用T(n)表示代码执行时间，n表示数据规模大小，f(n)表示代码执行次数综合，O(大写O)表示代码执行时间与f(n) 成正比例。

   假设算法的问题规模为n，那么操作单元数量便用函数f(n)来表示
   随着数据规模n的增大，算法执行时间的增长率和f(n)的增长率相同，这称作为算法的渐近时间复杂度，简称时间复杂度，记为 O(f(n))
   补充常用的时间复杂度所耗费的时间从小到大依次是：
   O(1)<O(logn)<O(n)< O(n*logn)<O(n^2)<O(n^3)< O(2^n)< O(n!)< O(n^n)

6、排序
6.1、内部排序：指待排序记录全部存放在内存中进行排序的过程
     外部排序：指待排序记录的数量很大，内存不能全部容纳，在排序过程中需要对外存进行访问的排序过程
     基本操作：比较两个关键码的大小；将记录从一个位置移动到另一个位置
     稳定性：在原序列中，r[i]=r[j]，且r[i]在r[j]之前，而在排序后的序列中，r[i]仍在r[j]之前，则称这种排序算法是稳定的
6.2、直接插入排序：将一条记录插入到已排好的有序表中，从而得到一个新的记录，时间复杂度O(n^2)，空间复杂度O(1)，是一种稳定的排序方法
     冒泡排序：从n个记录中依次找出最大的数据，时间复杂度O(n^2)，空间复杂度O(1)，是一种稳定的排序方法
     简单选择排序：从n个记录中依次找出最小的数据，时间复杂度O(n^2)，空间复杂度O(1)，是一种不稳定的排序方法
     希尔排序：时间复杂度O(n^1.3)，空间复杂度O(1)，是一种不稳定的排序方法
     快速排序：时间复杂度O(nlogn)，是一种不稳定的排序方法
     堆排序:时间复杂度O(nlogn)，是一种不稳定的排序方法
     归并排序：时间复杂度O(nlogn)，是一种稳定的排序方法
     基数排序：是一种稳定的排序方法



操作系统

1、基本概述
   特征：并发性、共享性、虚拟性和不确定性
   功能：进程管理、文件管理、存储管理、设备管理和作业管理
   分类：批处理、分时、实时、网络、分布式、微机、嵌入式

2、进程管理
2.1、进程是程序的一次执行。进程是程序执行的基本单位，一个进程是特定程序的一个实例。通常有程序、数据和进程控制块（PCB）组成
     程序顺序执行时的主要特征：顺序性、封闭性和可再现性
2.2、进程的状态
     进程三态模型：运行、就绪和阻塞
     进程五态模型：新建、就绪、运行、阻塞和终止
2.3、进程间通信
     进程同步：控制多个进程按一定顺序执行
     进程通信：进程间传输信息
     进程通信是一种手段，而进程同步是一种目的。也可以说，为了能够达到进程同步的目的，需要让进程进行通信，传输一些进程同步所需要的信息
     进程互斥、同步与通信的关系：进程竞争资源时要实施互斥，互斥是一种特殊的同步，实质上需要解决好进程同步问题，进程同步是一种进程通信
     信号量（Semaphore）机制：PV操作
     临界资源：进程间需要互斥方式对其进行共享的资源，如打印机
     临界区：每个进程中访问临界资源的那段代码称为临界区
     通信方式：管道、消息队列、信号量、共享内存、信号、socket
     同步方式：信号量、管程、临界区、互斥区、事件
2.4、进程调度
     调度方式：可剥夺和不可剥夺
     三级调度
     1、高级调度：作业调度，从后备队列中选择一个作业，将其调入内存，并创建进程，外存->内存（面向作业）
     2、中级调度：内存调度，从挂起队列中选择一个进程，将其数据调回内存，外存->内存（面向进程）
     3、低级调度：进程调度，从就绪队列中选择一个进程，分配处理机资源，内存->CPU，发生频率最高
     调度算法
     1、先来先服务：用于宏观调度，利于长作业或CPU繁忙的作业
     2、时间片轮转：用于微观调度，提高资源利用率，分为固定时间片、可变时间片
     3、优先级调度：根据优先级调度CPU，分为静态优先级、动态优先级
     4、多级反馈调度：时间片轮转算法+优先级算法
2.5、死锁
     死锁条件：互斥条件、请求保持条件、不可剥夺条件和环路条件
2.6、线程
     线程作为调度和分配的基本单位，进程作为独立分配资源的单位，同一个进程中的多个线程可并发执行
     线程分为用户级线程和内核支持线程，用户线程不依赖内核，进程依赖于内核中的进程调度
  
3、存储管理
3.1、存储器结构
     寄存器-高速缓存-主存-外存
3.2、管理方案
     分区存储：划分主存区域，分配给用户作业使用，可分为固定分区、可变分区、可重定位分区
     分页存储：
     1、原理：将一个进程的地址空间划分成若干个大小相等的区域，称为页。相应的，将主存空间划分成与页相同大小的若干个物理块，称为块或页框。
     为进程分配主存时，可将进程中若干页分别装入多个不相邻接的块中。
     2、地址结构：前一部分为页号P，后一部分为偏移量W，即页内地址。地址长度为32位，其中0-11位为页内地址（每页的大小为4KB=2^12/1024），12-31为页号，
     允许的地址空间大小最多为1MB=2^20/1024/1024个页
     分段存储：每段分配一个连续的分区，进程中的各段可以离散的分配到内存的不同分区
     段页式存储：由段号、段内页号、页内地址三部分组成
     虚拟存储：

4、设备管理
     设备管理技术：通道、DMA、缓冲和Spooling技术
     磁盘调度算法：先来先服务、最短寻道时间优先、扫描算法、单向扫描调度算法

5、文件管理

6、作业管理
6.1、作业与作业控制
     作业是系统为完成一个用户的计算任务所做的工作总和，由程序、数据和作业说明书组成
     作业状态：提交、后备、执行、完成
6.2、作业调度
     单道批量处理：先来先服务、短作业优先、响应比高优先
     多道批量处理：均衡调度算法
     响应比R：R=作业响应时间/作业执行时间=1+作业等待时间/作业执行时间
6.3、作业调度算法性能指标
     提交时间：作业提交的时间
     开始时间：作业开始执行的时间
     完成时间：作业完成执行的时间
     执行时间：作业运行的时间
     响应时间（周转时间）：作业进入系统后的等待时间与作业的执行时间之和
     响应时间（周转时间）=完成时间-提交时间
     带权周转时间=周转时间/执行时间=1+作业等待时间/作业执行时间，带权周转时间越大，作业越短；带权周转时间越小，作业越长。



软件工程基础：

1、软件工程概述
1.1、基本原理
     用分阶段的生命周期计划严格管理、阶段评审、产品控制、采用现代技术、审查结果、开发人员少而精、承认补短改进软件工程的必要性
1.2、生存周期
     项目开发计划、可行性分析、需求分析、设计（概要设计、详细设计）、编码、测试、维护
1.3、软件过程模型
     1、瀑布模型：各个阶段线性顺序连接，对于项目风险控制能力弱，无法发现前期错误
     2、增量模型：强调每个增量均发布一个可操作的产品，后期管理成本增大
     3、演化模型、螺旋模型、喷泉模型、统一过程、敏捷方法
1.4、软件需求：功能需求、非功能需求和设计约束
1.5、软件设计：概要设计、详细设计
1.6、软件测试：单元测试、集成测试、确认测试、系统测试
     黑盒测试：主要是功能测试
     白盒测试：主要测试程序内部结构和逻辑，常用逻辑覆盖、循环覆盖、基本路径测试等方法

2、数据流图
2.1、数据流图基本元素：数据流、加工、数据存储、外部实体
   
3、面向对象技术
3.1、五大原则：单一责任原则、开关原则、里式替换原则、依赖倒置原则、接口分离原则
3.2、UML
     UML事物：结构事物、行为事物、分组事物、注释事物
     1、结构事物：UML模型的静态部分，描述概念或物理元素
     2、行为事物：UML模型的动态部分，描述跨越时间和空间的行为，包括交互、状态机、活动
     3、分组事物：UML模型的组织部分
     4、注释事物：UML模型的解释部门，用来描述、说明和标注模型的任何元素
     UML关系：依赖、关联、泛华、实现
     1、依赖：两个事物间的语义关系
     2、关联：描述了整体和部分间的结构关系
     3、泛华：主要是子元素、父元素之间的关系
     4、实现：主要是类元之间的语义关系
     UML图：13种图，类图、对象图、用例图、序列图、通信图、状态图、活动图、构件图
     组合结构图、部署图、包图、交互概览图、计时图



数据库：

1、基本概述
1.1、数据库体系结构：三级模式+两级映像
     三级模式：外模式、概念模式、内模式
     两级映像：模式/内模式映像、外模式/模式映像
     概念模式：数据库中数据的逻辑结构和特征的描述，具体的值成为模式的一个实例
     外模式：用户与数据库系统的接口，通过DML语言，按照外模式的结构存储和操作数据
     内模式：是数据物理结构和存储方式的描述，是数据在数据库内部的表示方式

2、数据模型
2.1、数据模型：概念数据模型（E-R模型）、基本数据模型
     数据模型三要素：数据结构、数据操作、约束条件
2.2、E-R模型
     E-R方法、实体、联系、属性
2.3、基本数据模型
     层次模型：采用树型结构表示数据与数据之间的联系，上下层的联系是1：n联系
     网状模型：采用网络结构表示实体类型及实体间联系的数据模型
     关系模型：采用表格结构表达实体集，以及实体集之间的联系，特点是描述的一致性
     面向对象模型：以对象为单位存储数据

3、关系运算
3.1、关系数据库
     第一范式：
     关系中的属性个数成为元数，元祖的个数成为基数
     关系的3种类型：基本关系、查询表、视图表（虚表）
3.2、关系代数运算
     并：由属于R和属于S的元祖构成的集合，RUS
     差：由属于R但不属于S的元祖构成的集合，R-S
     笛卡尔积：由元数m的R和元数n的S构成的m+n的集合，R*S
     投影：从关系R中选出若干属性列A组成的新的关系，π（R）
     选择：从关系R中选出满足给定条件的元祖

4、事务管理
4.1、事务特征：原子性、一致性、隔离性、持久性
     原子性：事务是原子的，要么都做，要么不做
     一致性：事务执行的结果必须保证数据库处于一致性状态
     隔离性：多个事务并发执行时，相互隔离，事务相互不可见
     持久性：事务提交成功，对数据库的更新操作是永久有效的
4.2、并发操作
     并发操作带来的数据不一致性有三类：丢失修改、不可重复读、读脏数据
     丢失修改：操作数据后，造成数据不一致，破坏事务的隔离性
     不可重复读：同一事务内对同一组数据的相同运算结果不同，破坏事务的独立性
     读脏数据：事务修改数据后，通过回滚恢复初始值后，其他事务读取的还是修改后的数据



计算机网络

1、网络概述
1.1、网络分类：局域网（LAN）、城域网（MAN）、广域网（WAN）
     网络拓扑结构：总线型、星型、环型、树型、分布式
     OSI模型：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层
     物理层：中继器、集线器
     数据链路层：网桥、交换机
     网络层：路由器
     应用层：网关

2、TCP/IP模型：
2.1、分层模型：网络接口层、网际层、传输层、应用层
     网际层：IP、ICMP、ARP、RARP
     传输层：TCP、UDP
     应用层：FTP、SMTP、Telnet
2.2、IP地址：由网络号和主机号组成，共有32位，4个字节，网络号相同的主机可以直接访问，不同的需要通过路由器访问
     1、A类地址：第一个字节作为网络地址，最高位为0，第一个字节范围0-127
     2、B类地址：前两个字节作为网络地址，最高位为10，第一个字节范围128-191 
     3、C类地址：前三个字节作为网络地址，最高位为110，第一个字节范围192-223
     注意：1、在IP地址中，全0代表网络，全1代表广播，属于特殊用途
           2、A、B、C类IP地址，默认子网掩码255.0.0.0、255.255.0.0、255.255.255.0
	   3、A、B、C类内部私有地址：10.0.0.0-10.255.255.255、172.16.0.0-172.31.255.255、192.168.0.0-192.168.255.255
     子网掩码：采用子网掩码后相当于进行三级寻址，每个路由器在收到一个分组时，首先检查该分组的IP地址中的网络号，若不是本网络，则从
     路由表找出下一站地址将其转发出去，若是本网络，再检查IP地址中的子网号，若不是本子网，转发出去，若是本子网，则根据主机号查出

3、应用层协议
   DNS：采用UDP端口53
   Telnet：采用TCP端口23
   邮件协议：SMTP传送采用TCP端口25，POP3传送和接收采用TCP端口110

4、信息安全
   信息安全基本要素：机密性、完整性、可用性、可控性、可审查性
   网络威胁主动攻击：中断、篡改、伪造，被动攻击：消息内容获取、业务流分析